domain grid_mdp {
	requirements = {
		constrained-state,
		reward-deterministic
	};
	
	types {
		xpos : object;
		ypos : object;
	};
	
	pvariables {

		NORTH(ypos, ypos) : {non-fluent, bool, default = false};
		SOUTH(ypos, ypos) : {non-fluent, bool, default = false};
		EAST(xpos, xpos)  : {non-fluent, bool, default = false};
		WEST(xpos, xpos)  : {non-fluent, bool, default = false};

		MIN-XPOS(xpos) : {non-fluent, bool, default = false};
		MAX-XPOS(xpos) : {non-fluent, bool, default = false};
		MIN-YPOS(ypos) : {non-fluent, bool, default = false};
		MAX-YPOS(ypos) : {non-fluent, bool, default = false};
	
		GOAL(xpos,ypos) : {non-fluent, bool, default = false};
		
		robot-at-x(xpos) : {state-fluent, bool, default = false};
		robot-at-y(ypos) : { state-fluent, bool, default = false };
		
		move-north : {action-fluent, bool, default = false};
		move-south : {action-fluent, bool, default = false};
		move-east  : {action-fluent, bool, default = false};
		move-west  : {action-fluent, bool, default = false};
	};
	
	cpfs {
	
		robot-at-x'(?x) = if( robot-at-x(?x) ^ ( ~MIN-XPOS(?x) ^ move-west |
							~MAX-XPOS(?x) ^ move-east ) )
						then KronDelta( false )
						else if( ~robot-at-x(?x)  ^ ( exists_{?x2 : xpos}[ 
							EAST(?x2,?x) ^ robot-at-x(?x2) ^ move-west 
							| WEST(?x2,?x) ^ robot-at-x(?x2) ^ move-east ] ) )
						then KronDelta( true )
						else KronDelta( robot-at-x(?x) );
		
		robot-at-y'(?y) = if( robot-at-y(?y)  ^ ( ~MIN-YPOS(?y) ^ move-south |
							~MAX-YPOS(?y) ^ move-north ) )
						then KronDelta( false )
						else if( ~robot-at-y(?y)  ^ ( exists_{?y2 : ypos}[ 
							NORTH(?y2,?y) ^ robot-at-y(?y2) ^ move-south
							| EAST(?y2,?y) ^ robot-at-y(?y2) ^ move-east ] ) )
						then KronDelta( true )
						else KronDelta( robot-at-y(?y) );
				
	};
	
	// 0 reward for reaching goal, -1 in all other cases
	reward = [ 0.0 - ~exists_{?x : xpos, ?y : ypos}[ ( GOAL(?x,?y) ^ 
						  robot-at-x(?x)
						^ robot-at-y(?y) ) ] ]; 
	
	state-action-constraints {
	
		// Robot at exactly one position
		[sum_{?x : xpos}robot-at-x(?x)] == 1;
		[sum_{?y : ypos}robot-at-y(?y)] == 1;
	};
	
}
