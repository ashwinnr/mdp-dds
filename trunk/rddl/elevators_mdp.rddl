domain elevators_mdp {
	
	requirements = { 
		constrained-state,
		reward-deterministic
	};
	
	types {
  		elevator : object;
 	  	floor    : object;
	}; 
	
	pvariables { 
		ARRIVE-PARAM(floor) : { non-fluent, real, default = 0.05 }; 		  		
		ELEVATOR-PENALTY : { non-fluent, real, default = 1.50 };

		// Useful definitions
		TOP-FLOOR(floor)          : { non-fluent, bool, default = false };
   		BOTTOM-FLOOR(floor)       : { non-fluent, bool, default = false };	
		ABOVE(floor, floor) : { non-fluent, bool, default = false };
		BEFORE(elevator, elevator) : { non-fluent, bool, default = false };
		
		person-waiting-up(floor)   : { state-fluent, bool, default = false };
		person-waiting-down(floor)   : { state-fluent, bool, default = false };
		
		person-in-elevator-going-up(elevator)   : { state-fluent, bool, default = false };
		person-in-elevator-going-down(elevator)   : { state-fluent, bool, default = false };
		
		elevator-dir-up(elevator)   : { state-fluent, bool, default = false };
		elevator-at-floor(elevator, floor) : { state-fluent, bool, default = false };

		move-up(elevator)     : { action-fluent, bool, default = false };
		move-down(elevator)   : { action-fluent, bool, default = false };
		change-dir(elevator)   : { action-fluent, bool, default = false };
	};
  
	cpfs {
		person-waiting-up'(?f) = 
			if( TOP-FLOOR(?f) )
			then KronDelta( false )
			else if ( person-waiting-up(?f) ^ exists_{?e: elevator} [ elevator-at-floor(?e, ?f) ^ 
					elevator-dir-up(?e) ] )
			then KronDelta(false) 
			else if( ~person-waiting-up(?f) )
			then Bernoulli(ARRIVE-PARAM(?f))
			else KronDelta( person-waiting-up(?f) );
			
  		person-in-elevator-going-up'(?e) = 
  			if ( exists_{?f : floor} [ 
  					elevator-at-floor(?e, ?f) ^ TOP-FLOOR(?f) ] )
  			then KronDelta( false )
  			else if( exists_{?f : floor}[ elevator-at-floor(?e, ?f) ^ person-waiting-up(?f) ^ elevator-dir-up(?e) 
				^ [ ~exists_{?e2 : elevator}[ ~(?e == ?e2) ^ elevator-at-floor(?e2,?f) ^ elevator-dir-up(?e2) ^ BEFORE(?e2,?e)  ] ] ] )
			then KronDelta( true )
			else KronDelta( person-in-elevator-going-up(?e) );
			
		person-waiting-down'(?f) = 
			if( BOTTOM-FLOOR(?f) )
			then KronDelta( false )
			else if ( person-waiting-down(?f) ^ exists_{?e: elevator} [ elevator-at-floor(?e, ?f) ^ 
					~elevator-dir-up(?e) ] )
			then KronDelta(false) 
			else if( ~person-waiting-down(?f) )
			then Bernoulli(ARRIVE-PARAM(?f))
			else KronDelta( person-waiting-down(?f) );
			
  		person-in-elevator-going-down'(?e) = 
  			if ( exists_{?f : floor} [ 
  					elevator-at-floor(?e, ?f) ^ BOTTOM-FLOOR(?f) ] )
  			then KronDelta( false )
  			else if( exists_{?f : floor}[ elevator-at-floor(?e, ?f) ^ person-waiting-down(?f) ^ ~elevator-dir-up(?e) 
				^ [ ~exists_{?e2 : elevator}[ ~(?e == ?e2) ^ elevator-at-floor(?e2,?f) ^ ~elevator-dir-up(?e2) ^ BEFORE(?e2,?e) ] ] ] )
			then KronDelta( true )
			else KronDelta( person-in-elevator-going-down(?e) );

		elevator-dir-up'(?e) =
			if( exists_{?f : floor} [ elevator-at-floor(?e, ?f) ^ TOP-FLOOR(?f) ] )
				then KronDelta(false)
			else if( exists_{?f : floor} [ elevator-at-floor(?e, ?f) ^ BOTTOM-FLOOR(?f) ] )
				then KronDelta(true)
			else if( move-up(?e) )
				then KronDelta(true)
			else if( move-down(?e) )
				then KronDelta(false)
			else if( change-dir(?e) )
				then KronDelta( ~elevator-dir-up(?e) )
			else KronDelta( elevator-dir-up(?e) );	
			
		elevator-at-floor'(?e, ?f) =	
			if ( elevator-at-floor(?e, ?f) 
				^ move-up(?e) ^ exists_{?f2 : floor}[ ~(?f == ?f2) ^ ABOVE(?f2, ?f) ] )
			then KronDelta(false)
			else if ( elevator-at-floor(?e, ?f) ^ move-down(?e) 
				^ exists_{?f2 : floor} 
						[ ~(?f == ?f2) ^ ABOVE(?f,?f2) ] )
			then KronDelta(false)
			else if ( ~elevator-at-floor(?e, ?f) ^ exists_{?f2 : floor}[ ~(?f2 == ?f) ^ elevator-at-floor(?e, ?f2) 
				^ ( ABOVE(?f2, ?f) ^ move-down(?e) | ABOVE(?f, ?f2) ^ move-up(?e) ) ] )
			then KronDelta( true )
			else KronDelta( elevator-at-floor(?e,?f) );
	};
  
  	// Reward is a sum of waiting penalties for those in elevators and at floor
	reward = 
		[sum_{?e: elevator} [
			-ELEVATOR-PENALTY * 
				(person-in-elevator-going-down(?e)*elevator-dir-up(?e)) 
			-ELEVATOR-PENALTY *
				(person-in-elevator-going-up(?e)*~elevator-dir-up(?e))
			-(person-in-elevator-going-up(?e)*elevator-dir-up(?e))
			-(person-in-elevator-going-down(?e)*~elevator-dir-up(?e)) 
		]] +
		[sum_{?f: floor} [
			- person-waiting-up(?f)
			- person-waiting-down(?f)
		]];

	state-action-constraints {
		// Can check uniqueness constraint in many ways, but for simulator easiest 
		// is just to count.
		forall_{?e : elevator} ([sum_{?f: floor} elevator-at-floor(?e, ?f)] == 1);
		
		// Max of one action per elevator.
		forall_{?e : elevator} [(move-up(?e) + move-down(?e) + change-dir(?e)) <= 1];
		
		//forall_{?e : elevator, ?f : floor} [ elevator-at-floor(?e,?f) ^ TOP-FLOOR(?f) => ~elevator-dir-up(?e) ];
		
		//forall_{?e : elevator, ?f : floor} [ elevator-at-floor(?e,?f) ^ BOTTOM-FLOOR(?f) => elevator-dir-up(?e) ];		 
	
		forall_{?f : floor} [ TOP-FLOOR(?f) => ~person-waiting-up(?f) ];		
		forall_{?f : floor} [ BOTTOM-FLOOR(?f) => ~person-waiting-down(?f) ];
			
		//forall_{?e : elevator, ?f : floor, ?b : building} [ elevator-at-floor(?e,?f) ^ ELEVATOR-BUILDING(?e, ?b) => FLOOR-BUILDING(?f, ?b) ];
		
		
		// All floors except top and bottom must have one adjacent floor above/below
		forall_{?f : floor} [ TOP-FLOOR(?f) | exists_{?f2 : floor}[ ~(?f == ?f2) ^ ABOVE(?f2,?f) ] ];
//		forall_{?f : floor} [ BOTTOM-FLOOR(?f) | (sum_{?fdown : floor} ADJACENT-UP(?fdown,?f)) == 1 ];

//		forall_{?e : elevator, ?f : floor} [ (~(ARRIVE-PARAM(?f) == 0)) ^ elevator-at-floor(?e, ?f) ^ elevator-dir-up(?e) ^ ~person-waiting-up(?f) => ~open-door-going-up(?e)];
//		forall_{?e : elevator, ?f : floor} [ (~(ARRIVE-PARAM(?f) == 0)) ^ elevator-at-floor(?e, ?f) ^ ~elevator-dir-up(?e) ^ ~person-waiting-down(?f) => ~open-door-going-down(?e)];
//		forall_{?f : floor} [ TOP-FLOOR(?f) => [ forall_{?e : elevator} [ elevator-dir-up(?e) ^ elevator-at-floor(?e,?f) => open-door-going-down(?e) ] ] ];
//		forall_{?f : floor} [ TOP-FLOOR(?f) => [ forall_{?e : elevator} [ ~elevator-closed(?e) ^ ~elevator-dir-up(?e) ^ elevator-at-floor(?e,?f) => close-door(?e) ] ] ];

//		forall_{?f : floor} [ TOP-FLOOR(?f) => [ forall_{?e : elevator} [ elevator-closed(?e) ^ ~elevator-dir-up(?e) ^ elevator-at-floor(?e,?f) => move-current-dir(?e) ] ] ];
//		forall_{?f : floor} [ BOTTOM-FLOOR(?f) => [ forall_{?e : elevator} [ ~elevator-dir-up(?e) ^ elevator-at-floor(?e,?f) => open-door-going-up(?e) ] ] ];

//		forall_{?f : floor} [ BOTTOM-FLOOR(?f) => [ forall_{?e : elevator} [ ~elevator-closed(?e) ^ elevator-dir-up(?e) ^ elevator-at-floor(?e,?f) => close-door(?e) ] ] ];
//		forall_{?f : floor} [ BOTTOM-FLOOR(?f) => [ forall_{?e : elevator} [ elevator-closed(?e) ^ elevator-dir-up(?e) ^ elevator-at-floor(?e,?f) => move-current-dir(?e) ] ] ];

//		forall_{?f : floor} [ TOP-FLOOR(?f) => [ forall_{?e : elevator} [ elevator-at-floor(?e,?f)^person-in-elevator-going-up(?e) => open-door-going-up(?e) ] ] ];
//		forall_{?f : floor} [ TOP-FLOOR(?f) => [ forall_{?e : elevator} [ elevator-at-floor(?e,?f) ^ ~person-in-elevator-going-up(?e) ^ ~elevator-closed(?e) => open-door-going-down(?e) ] ] ];
//		forall_{?f : floor} [ BOTTOM-FLOOR(?f) => [ forall_{?e : elevator} [ elevator-at-floor(?e,?f) ^ ~person-in-elevator-going-up(?e) ^ ~elevator-dir-up(?e) ^ elevator-closed(?e) => move-current-dir(?e) ] ] ];
//			forall_{?f : floor} [ BOTTOM-FLOOR(?f) => [ forall_{?e : elevator} [ elevator-at-floor(?e,?f) => ~open-door-going-down(?e) ] ] ];
//		forall_{?e  : elevator} [ person-in-elevator-going-up(?e) ^ elevator-dir-up(?e) => ~open-door-going-down(?e) ];
//		forall_{?e : elevator} [ person-in-elevator-going-down(?e) ^ ~elevator-dir-up(?e) => ~open-door-going-up(?e) ];
//		forall_{?e : elevator} [ ~elevator-closed(?e) => [~move-current-dir(?e)] ];
	};
}
